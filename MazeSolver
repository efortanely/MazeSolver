import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.JApplet;
import javax.swing.Timer;

public class MazeSolver extends JApplet implements ActionListener, MouseListener, MouseMotionListener{
	private static final long serialVersionUID = 1L;
	boolean userInputMaze = false;
	ArrayList<Point> path = new ArrayList<Point>();
	int size = 20, seed = 1352, red = 255, green, blue, input = 0, pathStep;
	int[] mazePt = {0,0}, pi = {0,0}, pf = {0,0};
	double delayInSeconds = .01;
	boolean animateMotion, pointInitialized, inputMaze;
	int[][] numSteps;
	
	@Override
	public void init(){
		addMouseListener(this);
		addMouseMotionListener(this);
	    numSteps = new int[getHeight()/size][getWidth()/size];
	}
	
	public void actionPerformed(ActionEvent e){ 
		animateMotion = true; 
		repaint(); 
	}
	
	@Override
	public void paint(Graphics g){
		if(animateMotion){
			int colScl = (path.size() > 6)? 255/path.size() : 30;
			g.setColor(new Color(red,green,blue));			
			g.fillRect((int) path.get(pathStep).getX() * size, (int) path.get(pathStep).getY() * size, size, size);
			if(pathStep > 0){
				red -= colScl;
				blue += colScl;
				pathStep--;
			}
		}else if(pointInitialized){
			generatePath();
		}else if(userInputMaze){
			//mazePt updated with each new generated point
			g.setColor(Color.gray);
			g.fillRect(mazePt[0], mazePt[1], size, size);
		}else if(!userInputMaze){
			//indicate walls in numSteps w/ -1
			g.setColor(Color.gray);
			for(int r = 0; r < getWidth() / size; r++){ 
			for(int c = 0; c < getHeight() / size; c++){ 
				int numOnes = 0;
				String binary = Integer.toBinaryString(c*c + 3*c + 2*c*r + r + r*r + seed); //binary form of seed equation
				numOnes = binary.replaceAll("0", "").length(); //calculates # of 1's in binary string
				if(numOnes % 2 == 0) numSteps[r][c] = 0; //if # of 1's is equal, block is open space
				else{ //if # of 1's is odd, block is wall
					numSteps[r][c] = -1; 
					g.fillRect(c * size, r * size, size, size);
				}
			} 
			}
		}
	}

	@Override
	public void mouseClicked(MouseEvent click) {
		renderInput(click, false);
		if(input % 2 != 0) pointInitialized = true;
		input++;
	}

	@Override
	public void mouseDragged(MouseEvent click) {
		userInputMaze = true;
		renderInput(click, true);
	}
	
	public void renderInput(MouseEvent click, boolean isMaze){
		int inputX = click.getX(), inputY = click.getY();
		
		inputSearch: 
			for(int x = 0; x < getWidth(); x += size){
			for(int y = 0; y < getHeight(); y += size){
				if( (inputX >= x && inputX < x + size) && (inputY >= y && inputY < y + size) ){
					if(isMaze){
						numSteps[y/size][x/size] = -1;
						mazePt[0] = x;
						mazePt[1] = y;
					}else{
						if(input % 2 == 0){
							pi[0] = y / size;
							pi[1] = x / size; 
						}else{
							pf[0] = y / size;
							pf[1] = x / size;
						}
					}
					break inputSearch;
				}
			}
			}
		
		repaint();
		
	}
	
	public void generatePath(){
		int steps = 1;
		ArrayList<Point> recentGen = new ArrayList<Point>();
		
		//initializes open blocks around goal with 1 step
		for(int adj = -1; adj <= 1; adj += 2){ 
			if(pi[0] + adj >= 0 && pi[0] + adj < numSteps[0].length && numSteps[pi[0]+adj][pi[1]] == 0) numSteps[pi[0]+adj][pi[1]]++;
			if(pi[1] + adj >= 0 && pi[1] + adj < numSteps[1].length && numSteps[pi[0]][pi[1]+adj] == 0) numSteps[pi[0]][pi[1]+adj]++;
		}
		
		for(int iterations = 0; iterations < getWidth()/size * getHeight()/size; iterations++){
			
			//temporarily stores coordinates with n steps
			for(int i=0; i<numSteps[0].length; i++){
			for(int j=0; j<numSteps[1].length; j++){ 
				if(numSteps[i][j] == steps) recentGen.add(new Point (i,j));
			} 
			}
			
			steps++;
			
			//if adjacent blocks to n blocks are open, update them with n+1 steps
			for(Point block: recentGen){
				int x = (int) block.getX(), y = (int) block.getY();	
				for(int adj = -1; adj <= 1; adj += 2){ 
					if(x + adj >= 0 && x + adj < numSteps[0].length && numSteps[x + adj][y] == 0 && !(x + adj == pi[0] && y == pi[1])){ 
						numSteps[x + adj][y] = steps;
					}
					if(y + adj >= 0 && y + adj < numSteps[1].length && numSteps[x][y + adj] == 0 && !(x == pi[0] && y + adj == pi[1])){ 
						numSteps[x][y + adj] = steps;						
					}
				} 
			}
			recentGen.clear();
		}
		
		int r = pf[0], c = pf[1];
		path.add(new Point(c, r)); //initialize path with ending point
		for(int currentStep = numSteps[pf[0]][pf[1]]; currentStep > 0; currentStep--){
			for(int adj = -1; adj <= 1; adj += 2){
				//trace path from ending point with greatest number of steps, down to initial point at zero
				if(r + adj >= 0 && r + adj < numSteps[0].length && numSteps[r + adj][c] == currentStep - 1){
					r += adj;
					path.add(new Point(c, r));
				}
				if(c + adj >= 0 && c + adj < numSteps[1].length && numSteps[r][c + adj] == currentStep - 1){
					c += adj;
					path.add(new Point(c, r));
				}
			}
		}
		
		pathStep = path.size() - 1;
		new Timer((int) (delayInSeconds * 1000), this).start();
	}
	
	public void mouseEntered(MouseEvent arg0) {} public void mouseExited(MouseEvent arg0) {}	
	public void mousePressed(MouseEvent arg0) {} public void mouseReleased(MouseEvent arg0) {}
	public void mouseMoved(MouseEvent arg0) {}
}
