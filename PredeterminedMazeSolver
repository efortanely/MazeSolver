import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JApplet;
import javax.swing.Timer;

public class PredeterminedMazeSolver extends JApplet implements ActionListener, MouseListener, MouseMotionListener, ComponentListener{
	ArrayList<Point> path = new ArrayList<Point>();
	int size = 10, seed = 1352, red = (int) (127+127*Math.cos(0)), green, blue = (int) (127+127*Math.sin(0)), θ = 0, input = 0, pathStep, pointsInput = 0, rows, columns;
	int[] mazePt = {0,0}, pi = {0,0}, pf = {0,0};
	double delayInSeconds = .005;
	boolean animateMotion, inputMaze;
	int[][] numSteps;
	
	@Override
	public void init(){
		addMouseListener(this);
		addMouseMotionListener(this);
		addComponentListener(this);
	    rows = getHeight()/size;
	    columns = getWidth()/size;
	    numSteps = new int[rows][columns];
	}
	
	@Override
	public void actionPerformed(ActionEvent e) { 
		animateMotion = true; 
		repaint(); 
	}
	
	@Override
	public void paint(Graphics g){
		if(animateMotion){
			g.setColor(new Color(red,green,blue));
			g.fillRect((int) path.get(pathStep).getX()*size, (int) path.get(pathStep).getY()*size, size, size);
			if(pathStep > 0){
				//update path color based on alternating trigonometric waves, red increases while blue decreases and vice versa
				blue = (int) (127+127*Math.sin(200000*θ));
				red = (int) (127+127*Math.cos(200000*θ));
				pathStep--;
			}
			θ += (Math.PI/3);
		}else if(pointsInput == 2)	findShortestPath();
		else if(pointsInput == 0)	generateMaze(g);
	}

	public void generateMaze(Graphics g){
		//create starting, ending, require legal path
		
		g.setColor(Color.white);
		g.fillRect(0, 0, getWidth(), getHeight());
		
		//initialize as walls
		for(int r = 0; r < rows; r++){
        for(int c = 0; c < columns; c++){
        	numSteps[r][c] = -1;
        }
        }
		
		//create exit
		numSteps[1][1] = 0;
		numSteps[1][0] = 0;
		
		//create starting point
		numSteps[rows/2][columns/2] = 0;
		for(int adj = -1; adj <= 1; adj+=2){
			numSteps[rows/2+adj][columns/2] = -1;
			numSteps[rows/2][columns/2+adj] = -1;
			numSteps[rows/2+adj][columns/2+adj] = -1;
			numSteps[rows/2-adj][columns/2+adj] = -1;
		}
		for(int adj = -2; adj <= 2; adj+=4){
			for(int adj2 = -1; adj2 <= 1; adj2++){
				numSteps[rows/2+adj][columns/2+adj2] = 0;
				numSteps[rows/2+adj2][columns/2+adj] = 0;
			}
			numSteps[rows/2+adj][columns/2+adj] = 0;
			numSteps[rows/2-adj][columns/2+adj] = 0;
			
		}
		numSteps[rows/2+1][columns/2] = 0;
		
		generatePathways(1, 1);
		
		//draw maze
		g.setColor(Color.black);
	    for(int r = 0; r < rows; r++){
	    for(int c = 0; c < columns; c++){
	    	if(numSteps[r][c] == -1) g.fillRect(c*size, r*size, size, size);
	    }
	    }
	}
	
	public void generatePathways(int r, int c) {
		Random rand = new Random();
		int[][] directions = {{1 , 0}, {0, 1}, {-1, 0}, {0,-1}};
		int d = rand.nextInt(4), directionsSearched = 1;
		//for each cardinal direction
		while(directionsSearched <= 4) {
			//look at adjacent 2 in direction
			int r1 = r + directions[d][0], c1 = c + directions[d][1], 
					r2 = r1 + directions[d][0], c2 = c1 + directions[d][1];
	        //if both walls, empty both
	        if(r2 > 0 && r2 < rows - 1 && c2 > 0 && c2 < columns - 1 && numSteps[r1][c1] == -1 && numSteps[r2][c2] == -1) {
	           numSteps[r1][c1] = 0;
	           numSteps[r2][c2] = 0;
	           //repeat
	           generatePathways(r2, c2);
	        //if both are not walls, look in new direction
	        }else{
	           d = (d + 1) % 4;
	           directionsSearched++;
           }
        }
	}
	
	@Override
	public void mouseClicked(MouseEvent click) {
		pointsInput++;
		renderInput(click);
		if(pointsInput == 2){
			findShortestPath();
			animateMotion = true;
		}
	}

	@Override
	public void mouseDragged(MouseEvent click) {
		
	}
	
	public void renderInput(MouseEvent click){
		int inputX = click.getX(), inputY = click.getY();
		
		inputSearch: 
			for(int x = 0; x < getWidth(); x += size){
			for(int y = 0; y < getHeight(); y += size){
				if( (inputX >= x && inputX < x + size) && (inputY >= y && inputY < y + size) ){
					if(pointsInput == 1)pi = new int[]{y/size,x/size};
					else 				pf = new int[]{y/size,x/size};
					break inputSearch;
				}
			}
			}
		
		repaint();
		
	}
	
	public void findShortestPath(){
		assignStepCount();
		
		//create shortest path array list based on step count, used for drawing path
		int r = pf[0], c = pf[1];
		path.add(new Point(c, r)); //initialize path with ending point
		for(int currentStep = numSteps[pf[0]][pf[1]]; currentStep > 0; currentStep--){
			for(int adj = -1; adj <= 1; adj += 2){
				//trace path from ending point with greatest number of steps, down to initial point at zero
				if(r + adj >= 0 && r + adj < rows && numSteps[r + adj][c] == currentStep - 1){
					r += adj;
					path.add(new Point(c, r));
				}
				if(c + adj >= 0 && c + adj < columns && numSteps[r][c + adj] == currentStep - 1){
					c += adj;
					path.add(new Point(c, r));
				}
			}
		}
		
		pathStep = path.size() - 1;
		new Timer((int) (delayInSeconds * 1000), this).start();
	}
	
	public void assignStepCount(){
		int steps = 1;
		ArrayList<Point> recentGen = new ArrayList<Point>();
		
		//initializes open blocks around goal with 1 step
		for(int adj = -1; adj <= 1; adj += 2){ 
			if(pi[0] + adj >= 0 && pi[0] + adj < rows && numSteps[pi[0]+adj][pi[1]] == 0) numSteps[pi[0]+adj][pi[1]]++;
			if(pi[1] + adj >= 0 && pi[1] + adj < columns && numSteps[pi[0]][pi[1]+adj] == 0) numSteps[pi[0]][pi[1]+adj]++;
		}
		
		for(int iterations = 0; iterations < getWidth()/size * getHeight()/size; iterations++){
			
			//temporarily stores coordinates with n steps
			for(int i=0; i<rows; i++){
			for(int j=0; j<columns; j++){ 
				if(numSteps[i][j] == steps) recentGen.add(new Point (i,j));
			} 
			}
			
			steps++;
			
			//if adjacent blocks to n blocks are open, update them with n+1 steps
			for(Point block: recentGen){
				int x = (int) block.getX(), y = (int) block.getY();	
				for(int adj = -1; adj <= 1; adj += 2){ 
					if(x + adj >= 0 && x + adj < rows && numSteps[x + adj][y] == 0 && !(x + adj == pi[0] && y == pi[1])){ 
						numSteps[x + adj][y] = steps;
					}
					if(y + adj >= 0 && y + adj < columns && numSteps[x][y + adj] == 0 && !(x == pi[0] && y + adj == pi[1])){ 
						numSteps[x][y + adj] = steps;						
					}
				} 
			}
			recentGen.clear();
		}
	}
	
	@Override
	public void componentResized(ComponentEvent e) {
		rows = getHeight()/size;
	    columns = getWidth()/size;
	    numSteps = new int[rows][columns];
		
	}
	
	public void mouseEntered(MouseEvent arg0) {} 		public void mouseExited(MouseEvent arg0) {}	
	public void mousePressed(MouseEvent arg0) {} 		public void mouseReleased(MouseEvent arg0) {}
	public void mouseMoved(MouseEvent arg0) {}   		public void componentHidden(ComponentEvent arg0) {}
	public void componentMoved(ComponentEvent arg0) {} 	public void componentShown(ComponentEvent arg0) {}
}
